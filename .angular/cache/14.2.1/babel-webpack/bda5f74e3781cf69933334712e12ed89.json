{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { GlobalConstants } from 'src/app/shared/global-constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/product.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/app/services/category.service\";\nimport * as i5 from \"src/app/services/snackbar.service\";\nexport let ProductComponent = /*#__PURE__*/(() => {\n  class ProductComponent {\n    constructor(dialogData, formBuilder, productService, dialogRef, categoryService, snackbarService) {\n      this.dialogData = dialogData;\n      this.formBuilder = formBuilder;\n      this.productService = productService;\n      this.dialogRef = dialogRef;\n      this.categoryService = categoryService;\n      this.snackbarService = snackbarService;\n      this.onAddProduct = new EventEmitter();\n      this.onEditProduct = new EventEmitter();\n      this.productForm = FormGroup;\n      this.dialogAction = \"Add\";\n      this.action = \"Add\";\n      this.categorys = [];\n    }\n\n    ngOnInit() {\n      this.productForm = this.formBuilder.group({\n        name: [null, [Validators.required, Validators.pattern(GlobalConstants.nameRegex)]],\n        categoryId: [null, Validators.required],\n        price: [null, Validators.required],\n        description: [null, Validators.required]\n      });\n\n      if (this.dialogData.action === 'Edit') {\n        this.dialogAction = 'Edit';\n        this.action = \"Update\";\n        this.productForm.patchValue(this.dialogData.data);\n      }\n\n      this.getCategory();\n    }\n\n    getCategory() {\n      this.categoryService.getCategory().subscribe(response => {\n        this.categorys = response;\n      }, error => {\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n\n    handleSubmit() {\n      if (this.dialogAction === 'Edit') {\n        this.editProduct();\n      } else {\n        this.addProduct();\n      }\n    }\n\n    addProduct() {\n      var formData = this.productForm.value;\n      var data = {\n        name: formData.name,\n        categoryId: formData.categoryId,\n        price: formData.price,\n        description: formData.description\n      };\n      this.productService.addProduct(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onAddProduct.emit();\n        this.responseMessage = response.message;\n        this.snackbarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n\n    editProduct() {\n      var formData = this.productForm.value;\n      var data = {\n        id: this.dialogData.data.id,\n        name: formData.name,\n        categoryId: formData.categoryId,\n        price: formData.price,\n        description: formData.description\n      };\n      this.productService.updateProduct(data).subscribe(response => {\n        this.dialogRef.close();\n        this.onEditProduct.emit();\n        this.responseMessage = response.message;\n        this.snackbarService.openSnackBar(this.responseMessage, \"success\");\n      }, error => {\n        if (error.error?.message) {\n          this.responseMessage = error.error?.message;\n        } else {\n          this.responseMessage = GlobalConstants.genericError;\n        }\n\n        this.snackbarService.openSnackBar(this.responseMessage, GlobalConstants.error);\n      });\n    }\n\n  }\n\n  ProductComponent.ɵfac = function ProductComponent_Factory(t) {\n    return new (t || ProductComponent)(i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProductService), i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i4.CategoryService), i0.ɵɵdirectiveInject(i5.SnackbarService));\n  };\n\n  ProductComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProductComponent,\n    selectors: [[\"app-product\"]],\n    decls: 2,\n    vars: 0,\n    template: function ProductComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"product works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".mat-toolbar[_ngcontent-%COMP%]{margin:-24px -24px 10px;width:auto}.title-center[_ngcontent-%COMP%]{flex:1 1 auto;text-align:center}mat-form-field[_ngcontent-%COMP%]{padding:5px}\"]\n  });\n  return ProductComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}